version: '3'
services:
    # Client
    # client:
    #   build: "client"
    #   image: "client:latest"
    #   depends_on:
    #     - annotations
    #     - images
    #     - search
    #     - users

    # Annotation
    annotations:
      env_file:
        - .env
      build:
        context: "annotations"
      image: "annotations:latest"
      ports:
        - 8082:8082
      depends_on:
          - annotations-mongodb
      restart: on-failure
      healthcheck:
        test: ["CMD", "curl", "-f", "http://annotations:8082/actuator/health"]
        interval: 30s
        timeout: 10s
        retries: 5
      networks:
        - elastic
    annotations-mongodb:
      image: "mongo:latest"
      depends_on:
        - api-gateway
      restart: on-failure
      healthcheck:
        test: echo 'db.runCommand("ping").ok' | mongo mongodb://annotations-mongodb:27017/test --quiet
        interval: 30s
        timeout: 10s
        retries: 5
      ports: 
        - 27017:27017
      networks:
        - elastic
      volumes:
        - annotations-mongodb-data-container:/data/db

    # Authorization-server
    authorization-server:
      build:
        context: "authorization-server"
      image: "authorization-server:latest"
      ports:
        - 8090:8090
      depends_on:
          - api-gateway
      restart: on-failure
      healthcheck:
        test: ["CMD", "curl", "-f", "http://authorization-server:8090/actuator/health"]
        interval: 30s
        timeout: 10s
        retries: 5
      networks:
        - elastic

    # # Images
    images:
      env_file:
        - .env
      build:
        context: "images"
      image: "images:latest"
      ports:
        - 8084:8084
      depends_on:
        - images-mongodb
      restart: on-failure
      healthcheck:
        test: ["CMD", "curl", "-f", "http://images:8084/actuator/health"]
        interval: 30s
        timeout: 10s
        retries: 5
      networks:
        - elastic
    images-mongodb:
      image: "mongo:latest"
      depends_on:
        - api-gateway
      restart: on-failure
      healthcheck:
        test: echo 'db.runCommand("ping").ok' | mongo mongodb://images-mongodb:27017/test --quiet
        interval: 30s
        timeout: 10s
        retries: 5
      ports:
        - 27018:27017
      networks:
        - elastic
      volumes:
        - images-mongodb-data-container:/data/db

    # Search
    search:
      env_file:
        - .env
      hostname: "search"
      build: "search"
      image: "search:latest"
      ports:
        - 8083:8083
        - 27020:27020
      healthcheck:
        test: ["CMD", "curl", "-f", "http://search:8083/actuator/health"]
        interval: 30s
        timeout: 10s
        retries: 5
      depends_on:
        - es01
      restart:  on-failure
      networks:
        - elastic
    es01:
      hostname: "es01"
      image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
      container_name: es01
      environment:
        - node.name=es01
        - cluster.name=es-docker-cluster
        - discovery.type=single-node
        - bootstrap.memory_lock=true
        - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
        - "http.cors.allow-origin=*"
        - "http.cors.enabled=true"
        - "http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization"
        - "http.cors.allow-credentials=true"
      ulimits:
        memlock:
          soft: -1
          hard: -1
      volumes:
        - data01:/usr/share/elasticsearch/data
      ports:
        - 9200:9200
        - 9300:9300
      healthcheck:
        test: ["CMD", "curl", "-f", "http://es01:9200"]
        interval: 30s
        timeout: 10s
        retries: 5
      networks:
        - elastic
      depends_on:
        -  api-gateway
      restart: on-failure
  
    # Users
    users:
      env_file:
          - .env
      build:
        context: "users"
      image: "users:latest"
      ports:
        - 8081:8081
      depends_on:
          - users-mongodb
      restart: on-failure
      healthcheck:
        test: ["CMD", "curl", "-f", "http://users:8081/actuator/health"]
        interval: 30s
        timeout: 10s
        retries: 5
      networks:
        - elastic
    users-mongodb:
      image: "mongo:latest"
      depends_on:
        - api-gateway
      restart: on-failure
      healthcheck:
        test: echo 'db.runCommand("ping").ok' | mongo mongodb://users-mongodb:27017/test --quiet
        interval: 30s
        timeout: 10s
        retries: 5
      ports: 
        - 27019:27017
      networks:
        - elastic
      volumes:
        - users-mongodb-data-container:/data/db
    
    # Service discovery
    service-discovery:
      hostname: "service-discovery"
      build: "service.discovery"
      image: "service.discovery:latest"
      ports:
        - 8761:8761
      healthcheck:
        test: ["CMD", "curl", "-f", "http://service-discovery:8761/actuator/health"]
        interval: 30s
        timeout: 10s
        retries: 5
      networks:
        - elastic
    
    # API gateway
    api-gateway:
      hostname: "api-gateway"
      build: "api.gateway"
      image: "api.gateway:latest"
      ports:
        - 8080:8080
      healthcheck:
        test: ["CMD", "curl", "-f", "http://api-gateway:8080/actuator/health"]
        interval: 30s
        timeout: 10s
        retries: 5
      depends_on:
        - service-discovery
      restart: on-failure
      networks:
        - elastic
      
        
volumes:  
  annotations-mongodb-data-container:
  images-mongodb-data-container:
  users-mongodb-data-container:
  search-mongodb-data-container:
  # Elasticsearch
  data01:
    driver: local

networks:
  elastic:
    driver: bridge